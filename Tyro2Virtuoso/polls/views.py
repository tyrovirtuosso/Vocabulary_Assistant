from django.shortcuts import render, get_object_or_404
from django.http import HttpResponse, Http404, HttpResponseRedirect
from django.template import loader
from django.urls import reverse
from django.utils import timezone

from django.views import generic
# We’re using two generic views here: ListView and DetailView. 
# Respectively, those two views abstract the concepts of “display a list of objects” and “display a detail page for a particular type of object.”

from .models import Choice, Question


class IndexView(generic.ListView):
    # the ListView generic view uses a default template called <app name>/<model name>_list.html; 
    # we use template_name to tell ListView to use our existing "polls/index.html" template.
    template_name = "polls/index.html"
    
    # for ListView, the automatically generated context variable is question_list.
    # To override this we provide the context_object_name attribute, specifying that we want to use latest_question_list instead.
    context_object_name = "latest_question_list"

    def get_queryset(self):
        """
        Return the last five published questions (not including those set to be
        published in the future).
        """
        # Question.objects.filter(pub_date__lte=timezone.now()) 
        # returns a queryset containing Questions whose pub_date is less than or equal to -
        # that is, earlier than or equal to - timezone.now.
        return Question.objects.filter(pub_date__lte=timezone.now()).order_by("-pub_date")[:5]


class DetailView(generic.DetailView):
    # Each generic view needs to know what model it will be acting upon. 
    # This is provided using the model attribute.
    
    # The DetailView generic view expects the primary key value captured from the URL to be called "pk",
    # so we’ve changed question_id to pk for the generic views.
    
    # For DetailView the question variable is provided automatically – since we’re using a Django model (Question),
    # Django is able to determine an appropriate name for the context variable.

    model = Question
    
    # By default, the DetailView generic view uses a template called <app name>/<model name>_detail.html.
    # In our case, it would use the template "polls/question_detail.html".
    # The template_name attribute is used to tell Django to use a specific template name instead of the autogenerated default template name.
    template_name = "polls/detail.html"
    
    def get_queryset(self):
        """
        Excludes any questions that aren't published yet.
        """
        return Question.objects.filter(pub_date__lte=timezone.now())
    

class ResultsView(generic.DetailView):
    model = Question
    template_name = "polls/results.html"
    

# Same Above Views that are not Generic
"""
def index(request):  
    # request is an HttpRequest object  
    latest_question_list = Question.objects.order_by("-pub_date")[:5]
    context = {
        "latest_question_list": latest_question_list,
    }
    return render(request, "polls/index.html", context)

    '''
    # Longer Version
    template = loader.get_template("polls/index.html")
    return HttpResponse(template.render(context, request))
    '''

def detail(request, question_id):
    '''
    The get_object_or_404() function takes a Django model as its first argument and an arbitrary number of keyword arguments
    Theres also a get_list_or_404() function, which works just as get_object_or_404(), except using filter() instead of get()
    '''
    question = get_object_or_404(Question, pk=question_id)
    return render(request, "polls/detail.html", {"question": question})

    '''
    # Longer Version
    try:
        question = Question.objects.get(pk=question_id)
    except Question.DoesNotExist:
        raise Http404("Question does not exist")
    return render(request, "polls/detail.html", {"question": question})
    '''

def results(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    return render(request, "polls/results.html", {"question": question})
    
    '''
    Old Version:
    response = "You're looking at the results of question %s."
    return HttpResponse(response % question_id)
    '''
    
"""


def vote(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    try:
        # request.POST is a dictionary-like object that lets you access submitted data by key name. 
        # In this case, request.POST['choice'] returns the ID of the selected choice, as a string. 
        # request.POST values are always strings.
        selected_choice = question.choice_set.get(pk=request.POST["choice"]) 
    except (KeyError, Choice.DoesNotExist):
        # Redisplay the question voting form.
        return render(
            request,
            "polls/detail.html",
            {
                "question": question,
                "error_message": "You didn't select a choice.",
            },
        )
    else:
        selected_choice.votes += 1
        selected_choice.save()
        # Always return an HttpResponseRedirect after successfully dealing
        # with POST data. This prevents data from being posted twice if a
        # user hits the Back button.
        # reverse helps avoid having to hardcode a URL in the view function. 
        # It is given the name of the view that we want to pass control to and the variable portion of the URL pattern that points to that view.
        return HttpResponseRedirect(reverse("polls:results", args=(question.id,)))

# def index(request):
#     return HttpResponse("Your at Index Page")